import React, { createContext, useContext, useState, useEffect, useCallback } from 'react'
import { API_BASE_URL } from '../config'

const AuthContext = createContext()

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

// Função auxiliar para fazer requisições com tratamento de token
export const apiRequest = async (url, options = {}) => {
  const token = localStorage.getItem('access_token')
  
  // Configurar headers padrão
  const headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    ...options.headers
  }
  
  // Adicionar token de autenticação se disponível
  if (token) {
    headers['Authorization'] = `Bearer ${token}`
  }
  
  try {
    const response = await fetch(url, {
      ...options,
      headers,
      credentials: 'include'  // Importante para cookies
    })
    
    // Verificar se o token foi atualizado
    const newToken = response.headers.get('X-New-Token')
    if (newToken) {
      localStorage.setItem('access_token', newToken)
    }
    
    // Verificar se a resposta é JSON
    const contentType = response.headers.get('content-type')
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json()
      
      if (!response.ok) {
        // Se for erro de autenticação, limpar token
        if (response.status === 401) {
          localStorage.removeItem('access_token')
          window.location.href = '/login'
        }
        
        const error = new Error(data.error || 'Erro na requisição')
        error.response = response
        error.data = data
        throw error
      }
      
      return data
    }
    
    return response
  } catch (error) {
    console.error('API request error:', error)
    throw error
  }
}

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)
  const [profile, setProfile] = useState(null)
  const [loading, setLoading] = useState(true)
  const [token, setToken] = useState(localStorage.getItem('access_token'))
  
  // Função para atualizar o token
  const updateToken = useCallback((newToken) => {
    if (newToken) {
      localStorage.setItem('access_token', newToken)
      setToken(newToken)
    } else {
      localStorage.removeItem('access_token')
      setToken(null)
    }
  }, [setToken])

  // Função de logout
  const logout = useCallback(() => {
    localStorage.removeItem('access_token')
    localStorage.removeItem('refresh_token')
    setToken(null)
    setUser(null)
    setProfile(null)
  }, [])

  // Buscar perfil do usuário
  const fetchProfile = useCallback(async () => {
    try {
      const data = await apiRequest(`${API_BASE_URL}/profile/`)
      
      if (!data || !data.success) {
        throw new Error(data?.error || 'Failed to fetch profile')
      }
      
      setProfile(data.data)
      
      // Extrair informações do token
      const token = localStorage.getItem('access_token')
      if (!token) {
        throw new Error('No token found')
      }
      
      try {
        const tokenPayload = JSON.parse(atob(token.split('.')[1]))
        setUser({
          id: tokenPayload.user_id,
          email: tokenPayload.email,
          name: tokenPayload.name || tokenPayload.email.split('@')[0]
        })
      } catch (tokenError) {
        console.error('Error parsing token:', tokenError)
        throw new Error('Invalid token format')
      }
    } catch (error) {
      console.error('Error fetching profile:', error)
      logout()
    } finally {
      setLoading(false)
    }
  }, [API_BASE_URL, logout, setLoading, setProfile, setUser])

  // Efeito para verificar autenticação ao carregar
  useEffect(() => {
    const checkAuth = async () => {
      try {
        if (token) {
          await fetchProfile()
        } else {
          setLoading(false)
        }
      } catch (error) {
        console.error('Auth check failed:', error)
        updateToken(null)
      }
    }
    
    checkAuth()
  }, [token, updateToken, fetchProfile, setLoading])

  const login = async (email, password) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        credentials: 'include',  // Importante para enviar cookies
        body: JSON.stringify({ email, password })
      })

      const data = await response.json()

      if (response.ok && data.success) {
        const { access_token } = data.data.tokens
        localStorage.setItem('access_token', access_token)
        localStorage.setItem('refresh_token', data.data.tokens.refresh_token)
        setToken(access_token)
        setUser(data.data.user)
        setProfile(data.data.profile)
        return { success: true }
      } else {
        const errorMessage = data.error || (data.message || 'Login failed')
        console.error('Login failed:', errorMessage)
        return { success: false, error: errorMessage }
      }
    } catch (error) {
      console.error('Login error:', error)
      return { success: false, error: 'Network error' }
    }
  }

  const register = async (userData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        credentials: 'include',  // Importante para enviar cookies
        body: JSON.stringify(userData)
      })

      const data = await response.json()

      if (response.ok && data.success) {
        const { access_token } = data.data.tokens
        localStorage.setItem('access_token', access_token)
        localStorage.setItem('refresh_token', data.data.tokens.refresh_token)
        setToken(access_token)
        setUser(data.data.user)
        setProfile(data.data.profile)
        return { success: true }
      } else {
        return { success: false, error: data.error || 'Registration failed' }
      }
    } catch (error) {
      console.error('Registration error:', error)
      return { success: false, error: 'Network error' }
    }
  }

  const updateProfile = async (profileData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/profile/`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(profileData)
      })

      const data = await response.json()

      if (response.ok && data.success) {
        setProfile(data.data)
        return { success: true }
      } else {
        return { success: false, error: data.error || 'Profile update failed' }
      }
    } catch (error) {
      console.error('Profile update error:', error)
      return { success: false, error: 'Network error' }
    }
  }

  const updateLocation = async (locationData) => {
    try {
      const response = await fetch(`${API_BASE_URL}/profile/location`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(locationData)
      })

      const data = await response.json()

      if (response.ok && data.success) {
        return { success: true, data: data.data }
      } else {
        return { success: false, error: data.error || 'Location update failed' }
      }
    } catch (error) {
      console.error('Location update error:', error)
      return { success: false, error: 'Network error' }
    }
  }

  const value = {
    user,
    profile,
    loading,
    isAuthenticated: !!token,
    login,
    register,
    logout,
    updateProfile,
    updateLocation,
    fetchProfile
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}
